pipeline {
  agent any
  tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M2_HOME"
    }
   
stages {
        stage('Git') {
          steps {
           git branch: 'bedism',url: 'https://github.com/wiem12/ACHAT.git';
        }
      }
      stage('Build'){
            steps{
                sh 'mvn clean package '
            }
         }
       stage('MVN TEST'){
            steps{
                sh 'mvn test '
            }
         }
       
stage('Code Quality Check via SonarQube') {
             
             
            steps {
               
script {

sh '  mvn sonar:sonar -Dsonar.sources=src/main/java -Dsonar.css.node=. -Dsonar.java.binaries=. -Dsonar.host.url=http://192.168.33.10:9000/ -Dsonar.login=admin   -Dsonar.password=sonar'
 
}
               
            }
        }
        stage('artifact construction') {
            steps {
                echo 'artifact construction...'
                 sh 'mvn package -Dmaven.test.skip=true  -P test-coverage'

            }
        }
        
          stage('MVN Nexus'){
            steps {
               sh 'mvn deploy:deploy-file -DgroupId=tn.esprit.rh -DartifactId=achat -Dversion=1.0 -DgeneratePom=true -Dpackaging=jar -DrepositoryId=deploymentRepo -Durl=http://192.168.33.10:8081/repository/maven-releases/ -Dfile=target/achat-1.0.jar'
            } 
            }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "* File: ${artifactPath}, could not be found";
                    }
                }
            }
         
        }
        stage('Building our image') {
  steps {
               
sh 'docker build -t bedismelaouah/achat:1.0.0 .'
               
  }
            }
         stage(' docker-compose') {
          steps {
              sh "docker-compose up -d"
              sh "docker-compose stop"
          }
      }
}
}
